/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example;

import com.example.datastore.MapBasedUserRepository;
import com.example.datastore.MutableMapStore;
import com.example.domain.IdGenerator;
import com.example.domain.User;
import com.example.infra.IdGeneratorImpl;
import com.example.service.TimeServiceImpl;
import com.example.service.UserServiceImpl;
import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.Injector;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class UserApp {

    private final TimeService timeService;
    private final UserService userService;

    @Inject
    public UserApp(final TimeServiceImpl timeService,
        final UserServiceImpl userService) {
        this.timeService = timeService;
        this.userService = userService;
    }

    void runApp() {
        final List<Integer> userIds = NAMES.stream()
            .map(userService::createUser)
            .map(u -> u.id)
            .collect(Collectors.toList());

        final int[] userIdArray = userIds.stream()
            .mapToInt(it -> it)
            .toArray();

        final List<User> usersByIds = userService.findUsersByIds(userIdArray);
        usersByIds
            .stream()
            .map(user -> String.format("[%s]: %s", timeService.getCurrentTime(), user))
            .forEach(System.out::println);
    }

    private static final List<String> NAMES = Arrays.asList(
        "石田三成",
        "毛利秀元",
        "宇喜多秀家",
        "安国寺恵瓊",
        "伊藤盛正"
    );

    public static void main(String[] args) {
//        TimeServiceImpl timeService = new TimeServiceImpl();
//        IdGeneratorImpl idGenerator = new IdGeneratorImpl();
//        MutableMapStore store = new MutableMapStore();
//        MapBasedUserRepository repository = new MapBasedUserRepository(store);
//        UserServiceImpl userService = new UserServiceImpl(idGenerator, repository);
//        UserApp userApp = new UserApp(timeService, userService);
//        userApp.runApp();
        Injector injector = Guice.createInjector();
        UserApp userApp = injector.getInstance(UserApp.class);
        userApp.runApp();
    }
}
